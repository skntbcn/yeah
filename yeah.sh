#!/bin/bash

# Dependencias
source ./colors.sh
source ./log.sh

# chdir
cd "$(dirname "$0")"

# Path del repositorio y nombre del usuario propietario de secciones y paginas
yeahpath="/path/to/yeah.repo/"
username="myusername"

# Hay argumentos?
if [ $# -eq 0 ]
  then
    # Muestra grupos
    log "info" "Sections and pages:"

    # Flag
    hasSections=false

    # Leemos cada seccion
    for section in $(find . -type d | grep -v ^.$ | tr -d './' | sort);
    do
      # Path
    	sectionpath="${yeahpath}${section}"

      # Flags
      hasSections=true
      hasPages=false

      # Verbose
      printf "${Green}%-24s${Nocolor}" $section

      # Leemos cada pagina de la seccion
      for page in $(find $sectionpath -type f | grep -v ^.$ | awk -F'/' '{print $NF}' | sort);
      do
        # Verbose
      	echo -e -n "${Purple} $page${Nocolor}"

        # Modificamos el flag
        hasPages=true
      done

      # Paginas?
      if [ "$hasPages" = false ]; then
        echo -e -n " ${Yellow}<empty>${Nocolor}"
      fi

      # Nueva linea
      echo ''
    done

    # Si no hay secciones o paginas...
    if [ "$hasSections" = false ] || [ "$hasPages" = false ]; then
      log "err" "No sections or pages were found. Try yeah section page to add your first entry."
      log "err" "No arguments were provided."
    fi

    # Nos vamos
    exit 0
fi

# Leemos el input del usuario
section="$2"
action="$1"

# Variable
destinationDirectory="$(dirname ${yeahpath}${section})"
destinationFile="${yeahpath}${section}"

# Accion?
if [ "$action" = "read" ]; then
  # Existe la seccion?
  if [ ! -f $destinationFile ]; then
    log "err" "Section not found"
    exit 0
  fi

  # Verbose
  log "success" "Page information:"

  # Mostramos el contenido del fichero
  echo -e "${Black}$(cat $destinationFile)${Nocolor}"

  # Verbose
  log "success" "Bye!"

  # Nos vamos
  exit 0
fi

# Seteamos el history, obtenemos el comando y lo dejamos como estaba
HISTFILE=~/.zsh_history
set -o history 
command="$(history | cut -c 8- | grep -v 'yeah' | tail -1 | awk -F';' '{print $NF}')"
HISTFILE=''
set -o history

# Tenemos algo?
if [ -z "$command" ]; then
  # Verbose
  log "info" "Exit yeah!"

  # Nos vamos con success
  exit 0
fi

# Verbose si no existe el fichero?
if [ ! -f $destinationFile ]; then
 log "warn" "Page does not exist!"
fi

# Debe contestar Nn para cancelar, cualquier otra cosa sera un yes
while true; do
  echo -e -n "${Purple}[?]${Nocolor} Do you want to store '${Purple}$command${Nocolor}' in section '${Purple}$section${Nocolor}'? [${Purple}y${Nocolor}/n]: "
  read -p "" yn
    case $yn in
        [Yy]* ) break ;;
        [Nn]* ) log "err" "Cancelled by user!" ; exit 0 ;;
        * ) break ;;
    esac
done

# Quiere comentario?
echo -e -n "${Purple}[?]${Nocolor} Add a ${Purple}comment${Nocolor} or leave it blank []: "
read comment

# Existe el directorio? Si no, lo creamos y establecemos el owner
if [ ! -d $destinationDirectory ]; then
  mkdir -p $destinationDirectory
  chown $username: -R $destinationDirectory
  log "success" "Section created!"
fi

# Existe el fichero? Si no, lo creamos y establecemos el owner
if [ ! -f $destinationFile ]; then
  touch $destinationFile
  chown $username: $destinationFile
  log "success" "Page created!"
fi

# AÃ±adimos comentario si lo hay
if [ ! -z "$comment" ]; then
  echo "# $comment" >> $destinationFile
else
  echo "# Autogenerated comment" >> $destinationFile
fi

# Finalmente escribimos el comando
echo "$command" >> $destinationFile
echo "" >> $destinationFile

# Mensaje de despedida
log "success" "Saved in ${Green}$destinationFile${Nocolor}, bye!"
